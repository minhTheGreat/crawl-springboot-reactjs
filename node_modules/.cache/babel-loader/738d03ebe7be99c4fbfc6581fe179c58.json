{"ast":null,"code":"import _toConsumableArray from \"F:\\\\NoteJS\\\\final\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"F:\\\\NoteJS\\\\final\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"F:\\\\NoteJS\\\\final\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport * as Types from '../Config/managerConstant';\nvar initialState = [];\n\nvar findIndex =\n/*#__PURE__*/\nfunction () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(users, id) {\n    var result;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            result = -1;\n            _context.next = 3;\n            return users.forEach(function (user, index) {\n              if (user.id === id) {\n                result = index;\n              }\n            });\n\n          case 3:\n            return _context.abrupt(\"return\", result);\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function findIndex(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar users = function users() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  var index = -1;\n  var id = action.id,\n      user = action.user;\n\n  switch (action.type) {\n    case Types.FETCH_USERS:\n      state = action.users;\n      return _toConsumableArray(state);\n\n    case Types.DELETE_USER:\n      // index= findIndex(state,id)\n      // state.splice(index,1)\n      return _toConsumableArray(state).filter(function (state) {\n        return state.id !== id;\n      });\n\n    case Types.ADD_USER:\n      state.push(action.user);\n      return _toConsumableArray(state);\n\n    case Types.UPDATE_USER:\n      index = findIndex(state, user.id);\n      state[index] = user;\n      return _toConsumableArray(state);\n\n    default:\n      return state;\n  }\n};\n\nexport default users;","map":{"version":3,"sources":["F:\\NoteJS\\final\\src\\reducers\\userReducer.js"],"names":["Types","initialState","findIndex","users","id","result","forEach","user","index","state","action","type","FETCH_USERS","DELETE_USER","filter","ADD_USER","push","UPDATE_USER"],"mappings":";;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,2BAAvB;AAEA,IAAIC,YAAY,GAAG,EAAnB;;AAEA,IAAMC,SAAS;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAC,iBAAOC,KAAP,EAAaC,EAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AACRC,YAAAA,MADQ,GACD,CAAC,CADA;AAAA;AAAA,mBAEPF,KAAK,CAACG,OAAN,CAAc,UAACC,IAAD,EAAMC,KAAN,EAAgB;AAC/B,kBAAGD,IAAI,CAACH,EAAL,KAAUA,EAAb,EAAgB;AACZC,gBAAAA,MAAM,GAACG,KAAP;AACH;AAEJ,aALI,CAFO;;AAAA;AAAA,6CAQLH,MARK;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAD;;AAAA,kBAATH,SAAS;AAAA;AAAA;AAAA,GAAf;;AAWA,IAAMC,KAAK,GAAG,SAARA,KAAQ,GAAkC;AAAA,MAAjCM,KAAiC,uEAAzBR,YAAyB;AAAA,MAAXS,MAAW;AAC5C,MAAIF,KAAK,GAAC,CAAC,CAAX;AAD4C,MAErCJ,EAFqC,GAE5BM,MAF4B,CAErCN,EAFqC;AAAA,MAElCG,IAFkC,GAE5BG,MAF4B,CAElCH,IAFkC;;AAG5C,UAAQG,MAAM,CAACC,IAAf;AACI,SAAKX,KAAK,CAACY,WAAX;AACIH,MAAAA,KAAK,GAAGC,MAAM,CAACP,KAAf;AACA,gCAAWM,KAAX;;AACJ,SAAKT,KAAK,CAACa,WAAX;AACI;AACA;AACA,aAAO,mBAAIJ,KAAJ,EAAWK,MAAX,CAAkB,UAAAL,KAAK;AAAA,eAAKA,KAAK,CAACL,EAAN,KAAaA,EAAlB;AAAA,OAAvB,CAAP;;AACJ,SAAKJ,KAAK,CAACe,QAAX;AACIN,MAAAA,KAAK,CAACO,IAAN,CAAWN,MAAM,CAACH,IAAlB;AACA,gCAAWE,KAAX;;AACJ,SAAKT,KAAK,CAACiB,WAAX;AACIT,MAAAA,KAAK,GAACN,SAAS,CAACO,KAAD,EAAOF,IAAI,CAACH,EAAZ,CAAf;AACAK,MAAAA,KAAK,CAACD,KAAD,CAAL,GAAaD,IAAb;AACA,gCAAWE,KAAX;;AACJ;AAAS,aAAOA,KAAP;AAfb;AAiBH,CApBD;;AAqBA,eAAeN,KAAf","sourcesContent":["import * as Types from '../Config/managerConstant';\n\nvar initialState = [];\n\nconst findIndex=async (users,id)=>{\n    var result=-1;\n   await users.forEach((user,index) => {\n        if(user.id===id){\n            result=index\n        }\n        \n    });\n    return result;\n}\n\nconst users = (state = initialState, action) => {\n    var index=-1;\n    const {id,user}=action\n    switch (action.type) {\n        case Types.FETCH_USERS:\n            state = action.users;\n            return [...state];\n        case Types.DELETE_USER:\n            // index= findIndex(state,id)\n            // state.splice(index,1)\n            return [...state].filter(state =>  state.id !== id);\n        case Types.ADD_USER:\n            state.push(action.user);\n            return [...state];\n        case Types.UPDATE_USER:\n            index=findIndex(state,user.id)\n            state[index]=user;\n            return [...state];\n        default: return state;\n    }\n}\nexport default users;"]},"metadata":{},"sourceType":"module"}