{"ast":null,"code":"import _regeneratorRuntime from \"F:\\\\NoteJS\\\\final\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"F:\\\\NoteJS\\\\final\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport * as Types from '../Config/managerConstant';\nimport API from '../utils/api'; //fetch source\n\nexport var actFetchSource = function actFetchSource(currentPage, size) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(dispatch) {\n        var _ref2, data;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                _context.next = 3;\n                return API.get(\"source/getall/?page=\".concat(currenPage, \"&size=\").concat(size));\n\n              case 3:\n                _ref2 = _context.sent;\n                data = _ref2.data;\n                dispatch({\n                  type: Types.FETCH_SOURCE,\n                  sources: data.contents,\n                  totalPages: data.totalPages\n                });\n                _context.next = 10;\n                break;\n\n              case 8:\n                _context.prev = 8;\n                _context.t0 = _context[\"catch\"](0);\n\n              case 10:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[0, 8]]);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }()\n  );\n};","map":{"version":3,"sources":["F:\\NoteJS\\final\\src\\actions\\sourceAction.js"],"names":["Types","API","actFetchSource","currentPage","size","dispatch","get","currenPage","data","type","FETCH_SOURCE","sources","contents","totalPages"],"mappings":";;AAAA,OAAO,KAAKA,KAAZ,MAAuB,2BAAvB;AACA,OAAOC,GAAP,MAAgB,cAAhB,C,CAEA;;AACA,OAAO,IAAMC,cAAc,GAAC,SAAfA,cAAe,CAACC,WAAD,EAAaC,IAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAqB,iBAAMC,QAAN;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAEpBJ,GAAG,CAACK,GAAJ,+BAA+BC,UAA/B,mBAAkDH,IAAlD,EAFoB;;AAAA;AAAA;AAElCI,gBAAAA,IAFkC,SAElCA,IAFkC;AAGzCH,gBAAAA,QAAQ,CAAC;AAACI,kBAAAA,IAAI,EAACT,KAAK,CAACU,YAAZ;AAAyBC,kBAAAA,OAAO,EAACH,IAAI,CAACI,QAAtC;AAA+CC,kBAAAA,UAAU,EAACL,IAAI,CAACK;AAA/D,iBAAD,CAAR;AAHyC;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAArB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAArB","sourcesContent":["import * as Types from '../Config/managerConstant';\r\nimport API from '../utils/api';\r\n\r\n//fetch source\r\nexport const actFetchSource=(currentPage,size)=> async dispatch=>{\r\n    try{\r\n        const {data} = await API.get(`source/getall/?page=${currenPage}&size=${size}`)\r\n        dispatch({type:Types.FETCH_SOURCE,sources:data.contents,totalPages:data.totalPages})\r\n    }catch(err){\r\n\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}